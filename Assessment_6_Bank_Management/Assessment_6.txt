=> The bank related information of a person we have one DATABASE (created bank_information)

CREATE DATABASE bank_information;
USE bank_information;

=> Create a Bank table, attributes are : branch id, branch name, branch city

CREATE TABLE Bank (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(100),
    branch_city VARCHAR(100)
);

=> Create a Loan table, attributes are : loan no, branch id, account holder’s id, loan amount and loan type

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_id INT,
    account_holder_id INT,
    loan_amount DECIMAL(10, 2),
    loan_type VARCHAR(50),
    FOREIGN KEY (branch_id) REFERENCES Bank(branch_id),
    FOREIGN KEY (account_holder_id) REFERENCES AccountHolder(account_holder_id)
);

=> Create a table named as Account holder for the same scenario containing the attributes are account holder’s id, account no,
 account holder’s name, city,contact, date of account created, account status (active or terminated), account type and balance.

CREATE TABLE AccountHolder (
    account_holder_id INT PRIMARY KEY,
    account_no INT,
    account_holder_name VARCHAR(100),
    city VARCHAR(100),
    contact VARCHAR(15),
    date_of_account_created DATE,
    account_status VARCHAR(50),
    account_type VARCHAR(50),
    balance DECIMAL(10, 2)
);

=> Consider an example where there’s an account holder table where we are doing an intra bank transfer 
i.e. a person holding account A is trying to transfer $100 to account B.

=> First, inserting data to AccountHolder with insert query

INSERT INTO AccountHolder VALUES (1, 1001, 'John Doe', 'New York', '123-456-7890', '2022-01-15', 'Active', 'Savings', 5000.00);

INSERT INTO AccountHolder VALUES (2, 1002, 'Jane Smith', 'Los Angeles', '987-654-3210', '2022-02-20', 'Active', 'Checking', 7000.00);

=> for this you have to make a transaction in sql which can transfer fund from account A to B
=> Make sure after the transaction the account information have to be updated for both the credit account and the debited account

START TRANSACTION;

UPDATE AccountHolder
SET balance = balance - 100
WHERE account_holder_id = 1;

UPDATE AccountHolder
SET balance = balance + 100
WHERE account_holder_id = 2;

COMMIT;

 SELECT * FROM AccountHolder;
+-------------------+------------+---------------------+-------------+--------------+-------------------------+----------------+--------------+---------+
| account_holder_id | account_no | account_holder_name | city        | contact      | date_of_account_created | account_status | account_type | balance |
+-------------------+------------+---------------------+-------------+--------------+-------------------------+----------------+--------------+---------+
|                 1 |       1001 | John Doe            | New York    | 123-456-7890 | 2022-01-15              | Active         | Savings      | 4900.00 |
|                 2 |       1002 | Jane Smith          | Los Angeles | 987-654-3210 | 2022-02-20              | Active         | Checking     | 7100.00 |
+-------------------+------------+---------------------+-------------+--------------+-------------------------+----------------+--------------+---------+

=> Also fetch the details of the account holder who are related from the same city

=> inserting new 2 person account
INSERT INTO AccountHolder VALUES (3, 1003, 'John Clark', 'New York', '123-456-7820', '2023-01-16', 'Active', 'Savings', 5500.00);

INSERT INTO AccountHolder VALUES (4, 1004, 'Jane D', 'Los Angeles', '987-654-3200', '2024-02-10', 'Active', 'Checking', 7080.00);

 SELECT * FROM AccountHolder;
+-------------------+------------+---------------------+-------------+--------------+-------------------------+----------------+--------------+---------+
| account_holder_id | account_no | account_holder_name | city        | contact      | date_of_account_created | account_status | account_type | balance |
+-------------------+------------+---------------------+-------------+--------------+-------------------------+----------------+--------------+---------+
|                 1 |       1001 | John Doe            | New York    | 123-456-7890 | 2022-01-15              | Active         | Savings      | 4900.00 |
|                 2 |       1002 | Jane Smith          | Los Angeles | 987-654-3210 | 2022-02-20              | Active         | Checking     | 7100.00 |
|                 3 |       1003 | John Clark          | New York    | 123-456-7820 | 2023-01-16              | Active         | Savings      | 5500.00 |
|                 4 |       1004 | Jane D              | Los Angeles | 987-654-3200 | 2024-02-10              | Active         | Checking     | 7080.00 |
+-------------------+------------+---------------------+-------------+--------------+-------------------------+----------------+--------------+---------+

 SELECT * FROM AccountHolder a1 WHERE EXISTS (SELECT 1 FROM AccountHolder a2 WHERE a1.city = a2.city  AND a1.account_holder_id != a2.account_holder_id);
+-------------------+------------+---------------------+-------------+--------------+-------------------------+----------------+--------------+---------+
| account_holder_id | account_no | account_holder_name | city        | contact      | date_of_account_created | account_status | account_type | balance |
+-------------------+------------+---------------------+-------------+--------------+-------------------------+----------------+--------------+---------+
|                 1 |       1001 | John Doe            | New York    | 123-456-7890 | 2022-01-15              | Active         | Savings      | 4900.00 |
|                 3 |       1003 | John Clark          | New York    | 123-456-7820 | 2023-01-16              | Active         | Savings      | 5500.00 |
+-------------------+------------+---------------------+-------------+--------------+-------------------------+----------------+--------------+---------+

=> Write a query to fetch account number and account holder name, whose accounts were created after 15th of any month

 SELECT account_no, account_holder_name FROM AccountHolder WHERE DAY(date_of_account_created) > 15;
+------------+---------------------+
| account_no | account_holder_name |
+------------+---------------------+
|       1002 | Jane Smith          |
|       1003 | John Clark          |
+------------+---------------------+

=> inserting new 2 person account bank and loan details to tables

INSERT INTO Bank (branch_id, branch_name, branch_city) VALUES (1, 'Main Street Branch', 'New York');

INSERT INTO Bank (branch_id, branch_name, branch_city) VALUES (2, 'Downtown Branch', 'Los Angeles');

INSERT INTO Loan (loan_no, branch_id, account_holder_id, loan_amount, loan_type) VALUES (101, 1, 1, 10000.00, 'Personal Loan');

INSERT INTO Loan (loan_no, branch_id, account_holder_id, loan_amount, loan_type) VALUES (102, 2, 2, 15000.00, 'Home Loan');

=> Write a query to display the city name and count the branches in that city. Give the count of branches an alias name of Count_Branch.

 SELECT branch_city, COUNT(branch_id) AS Count_Branch FROM Bank GROUP BY branch_city;
+-------------+--------------+
| branch_city | Count_Branch |
+-------------+--------------+
| New York    |            1 |
| Los Angeles |            1 |
+-------------+--------------+

=> Write a query to display the account holder’s id, account holder’s name, branch id, and 
loan amount for people who have taken loans. (NOTE : use sql join concept to solve the query)

 SELECT ah.account_holder_id, ah.account_holder_name, l.branch_id, l.loan_amount FROM AccountHolder ah JOIN Loan l ON ah.account_holder_id = l.account_holder_id;
+-------------------+---------------------+-----------+-------------+
| account_holder_id | account_holder_name | branch_id | loan_amount |
+-------------------+---------------------+-----------+-------------+
|                 1 | John Doe            |         1 |    10000.00 |
|                 2 | Jane Smith          |         2 |    15000.00 |
+-------------------+---------------------+-----------+-------------+